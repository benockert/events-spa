{"version":3,"sources":["store.js","api.js","Navigation/Nav.js","Posts/Feed.js","Comments/New.js","Comments/Comments.js","Responses/New.js","Responses/Responses.js","Posts/View.js","Posts/New.js","Users/List.js","Users/New.js","App.js","reportWebVitals.js","index.js"],"names":["get_user_id","session","localStorage","getItem","JSON","parse","user_id","save_session","sess","Object","assign","time","Date","now","setItem","stringify","clear_session","removeItem","restore_session","state","action","type","data","users","posts","comments","responses","error","store","createStore","console","log","reducer","combineReducers","url","api_get","path","a","fetch","text","json","resp","api_post","req","method","headers","body","get_users","then","dispatch","get_posts","get_responses","get_comments","SessionState","name","Button","variant","onClick","ev","preventDefault","LoginForm","useState","email","setEmail","pass","setPass","Form","onSubmit","password","api_login","inline","Control","onChange","target","value","Nav","Link","to","LoginOrInfo","connect","children","Item","exact","className","activeClassName","error_banner","Row","Col","Alert","xs","Event","post","view_link","id","Card","style","width","Body","Title","title","Text","description","user","cards","map","NewComment","props","history","useHistory","comment","setComment","post_id","event_path","new_comment","push","Group","placeholder","comm","updateComment","disabled","Comment","filter","NewResponse","response","setResponse","new_response","Response","ListGroup","list","event_number","useLocation","pathname","split","date","invitees","Responses","Comments","setPost","updateField","field","new_event","invitee_msg","valid","email_list","i","length","test","check_invitees","pick","new_post","Label","as","rows","anyBlank","pass1","pass2","setUser","update","p1","p2","u1","pass_msg","email_msg","new_user","App","Container","List","New","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2524acc6.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux';\n\n//-------------------------SESSION---------------------------\nexport function get_user_id() {\n  let session = localStorage.getItem(\"session\");\n  if (!session) {\n    return null;\n  }\n  session = JSON.parse(session);\n  return session.user_id;\n}\n\n\nfunction save_session(sess) {\n  let session = Object.assign({}, sess, {time: Date.now()});\n  localStorage.setItem(\"session\", JSON.stringify(session));\n}\n\n//clears the session when a user logs out\nfunction clear_session() {\n  localStorage.removeItem(\"session\");\n}\n\n//user session restore on page refresh (if still exists)\nfunction restore_session() {\n  let session = localStorage.getItem(\"session\");\n  if (!session) {\n    return null;\n  }\n  session = JSON.parse(session);\n  let age = Date.now() - session.time;\n  let hour = 3600000; // one hour session expiration (in milliseconds)\n  if (age < hour) {\n    return session;\n  }\n  else {\n    return null;\n  }\n}\n\n// user session; initial state = current session (if active)\nfunction session(state = restore_session(), action) {\n  switch (action.type) {\n    case 'session/set':\n      save_session(action.data);\n      return action.data;\n    case 'session/clear':\n      clear_session();\n      return null;\n    default:\n      return state;\n  }\n}\n\n//--------------------------USERS---------------------------\n//list of users\nfunction users(state = [], action) {\n    switch (action.type) {\n    case 'users/set':\n        return action.data;\n    default:\n        return state;\n    }\n}\n\n//--------------------------POSTS---------------------------\n//list of posts\nfunction posts(state = [], action) {\n    switch (action.type) {\n    case 'posts/set':\n        return action.data;\n    default:\n        return state;\n    }\n}\n\n//------------------------COMMENTS---------------------------\n//list of comments\nfunction comments(state = [], action) {\n    switch (action.type) {\n    case 'comments/set':\n        return action.data;\n    default:\n        return state;\n    }\n}\n\n//------------------------RESPONSES---------------------------\n//list of responses\nfunction responses(state = [], action) {\n    switch (action.type) {\n    case 'responses/set':\n        return action.data;\n    default:\n        return state;\n    }\n}\n\n//--------------------------ERROR---------------------------\nfunction error(state = null, action) {\n  switch (action.type) {\n    case 'session/set':\n      return null;\n    case 'error/set':\n      return action.data;\n    default:\n      return state;\n  }\n}\n\n//----------------------------------------------------------\nfunction root_reducer(state, action) {\n    console.log(\"root_reducer\", state, action);\n    let reducer = combineReducers({\n        session, users, posts, responses, comments, error\n    });\n\n    console.log(\"state\", reducer(state, action))\n    return reducer(state, action);\n}\n\nlet store = createStore(root_reducer);\nexport default store;\n","import store from './store';\n\n//const url = \"http://localhost:4000/api/v1\";\nconst url = \"http://events-server.benockert.site/api/v1\";\n\nasync function api_get(path) {\n    let text = await fetch(url + path, {});\n    let resp = await text.json();\n    return resp.data;\n}\n\nasync function api_post(path, data) {\n  let req = {method: 'POST',\n            headers: {'Content-Type': 'application/json'},\n            body: JSON.stringify(data)};\n  console.log(\"to be sent\", req)\n  let text = await fetch(url + path, req);\n  console.log(\"response\", text);\n  let resp = await text.json();\n  return resp;\n}\n\nexport function get_users() {\n    api_get(\"/users\").then((data) => store.dispatch({\n        type: 'users/set',\n        data: data,\n    }));\n}\n\nexport function new_user(user) {\n  return api_post(\"/users\", {user});\n}\n\nexport function get_posts() {\n    api_get(\"/posts\").then((data) => store.dispatch({\n        type: 'posts/set',\n        data: data,\n    }));\n}\n\nexport function new_post(post) {\n  console.log(post)\n  return api_post(\"/posts\", {post});\n}\n\nexport function get_responses() {\n    api_get(\"/responses\").then((data) => store.dispatch({\n        type: 'responses/set',\n        data: data,\n    }));\n}\n\nexport function new_response(response) {\n  console.log(\"response\", response)\n  return api_post(\"/responses\", {response});\n}\n\nexport function get_comments() {\n    api_get(\"/comments\").then((data) => store.dispatch({\n        type: 'comments/set',\n        data: data,\n    }));\n}\n\nexport function new_comment(comment) {\n  console.log(comment)\n  return api_post(\"/comments\", {comment});\n}\n\nexport function api_login(email, password) {\n  api_post(\"/session\", {email, password}).then((data) => {\n    console.log(\"login response\", data);\n    if (data.session) {\n      let action = {\n        type: 'session/set',\n        data: data.session,\n      }\n      store.dispatch(action);\n    }\n    else if (data.error) {\n      let action = {\n        type: 'error/set',\n        data: data.error,\n      };\n      store.dispatch(action);\n    }\n  });\n}\n\nexport function load_defaults() {\n    get_users();\n    get_posts();\n    get_responses();\n    get_comments();\n}\n","import { Nav, Row, Col, Form, Button, Alert } from 'react-bootstrap';\nimport { NavLink } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { useState } from 'react';\n\nimport { api_login } from '../api';\nimport store from '../store';\n\nfunction SessionState({session}) {\n  function logout(ev) {\n    ev.preventDefault();\n    store.dispatch({ type: 'session/clear' });\n  }\n\n  return (\n    <p>\n      Logged in as {session.name}\n      <Button variant=\"outline-primary\" onClick={logout}>Logout</Button>\n    </p>\n  );\n}\n\nfunction LoginForm() {\n  const [email, setEmail] = useState(\"\");\n  const [pass, setPass] = useState(\"\");\n\n  function on_submit(ev) {\n    ev.preventDefault();\n    api_login(email, pass);\n  }\n\n  return (\n    <div>\n      <Form onSubmit={on_submit} inline>\n        <Form.Control name=\"name\"\n                      type=\"text\"\n                      onChange={(ev) => setEmail(ev.target.value)}\n                      value={email} />\n        <Form.Control name=\"password\"\n                      type=\"password\"\n                      onChange={(ev) => setPass(ev.target.value)}\n                      value={pass} />\n        <Button variant=\"outline-primary\" type=\"submit\">\n          Login\n        </Button>\n        <Nav variant=\"link\">\n          <Link to=\"/users/new\">Register</Link>\n        </Nav>\n      </Form>\n    </div>\n  );\n}\n\nfunction LOI({session}) {\n  if (session) {\n    return <SessionState session={session} />;\n  }\n  else {\n      return <LoginForm />\n  }\n}\n\nconst LoginOrInfo = connect(\n  ({session}) => ({session}))(LOI);\n\nfunction Link({to, children}) {\n  return (\n    <Nav.Item>\n      <NavLink to={to} exact className=\"nav-link\" activeClassName=\"active\">\n        {children}\n      </NavLink>\n    </Nav.Item>\n  );\n}\n\nfunction AppNavigation({error}) {\n  let error_banner = null;\n\n  if (error) {\n    error_banner = (\n      <Row>\n        <Col>\n          <Alert variant=\"danger\">{error}</Alert>\n        </Col>\n      </Row>\n    );\n  }\n\n  return (\n    <div>\n      <Row>\n        <Col>\n          <Nav variant=\"pills\">\n            <Link to=\"/\">Feed</Link>\n            <Link to=\"/users\">Users</Link>\n          </Nav>\n        </Col>\n        <Col xs={8}>\n          <LoginOrInfo />\n        </Col>\n      </Row>\n      { error_banner }\n    </div>\n  );\n}\n\nexport default connect(({error}) => ({error}))(AppNavigation);\n","import { Row, Col, Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\n//no photo uploads needed\n\nfunction Event({post}) {\n  let view_link = \"/events/\" + post.id\n  return (\n    <Col>\n      <Card style={{ width: '18rem' }}>\n        <Card.Body>\n          <Card.Title>\n            {post.title}\n          </Card.Title>\n          <Card.Text>\n            {post.description}\n            <br/>\n            <br/>\n            <i>Hosted by {post.user.name}</i>\n          </Card.Text>\n          <Link to={view_link}>Show Event</Link>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n}\n\nfunction EventsFeed({posts}) {\n  let cards = posts.map((post) => <Event post={post} key={post.id} />);\n  return (\n    <div>\n      <h2>Your Events Feed</h2>\n      <p><Link to=\"/events/new\">New Event</Link></p>\n      <Row>\n        { cards }\n      </Row>\n    </div>\n  );\n}\n\nexport default connect(({posts}) => ({posts}))(EventsFeed);\n","import { Row, Col, Form, Button } from 'react-bootstrap';\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { get_user_id } from '../store'\n\nimport { new_comment, get_comments } from '../api';\n\nexport default function NewComment(props) {\n  let history = useHistory();\n  const [comment, setComment] = useState({body: \"\"});\n\n  function updateComment(ev) {\n    let comm = Object.assign({}, comment);\n    comm[\"body\"] = ev.target.value;\n    setComment(comm);\n  }\n\n  function onSubmit(ev) {\n    ev.preventDefault();\n\n    //sets the user_id and the post_id for this comment\n    comment.user_id = get_user_id();\n    comment.post_id = props.post_id;\n    let event_path = \"/events/\" + comment.post_id;\n\n    new_comment(comment).then(() => {\n      get_comments();\n      history.push(event_path);\n    });\n  }\n\n  return (\n    <Row>\n      <Col>\n        <Form onSubmit={onSubmit}>\n          <Form.Group>\n            <Form.Control type=\"text\"\n                          placeholder=\"Type a new comment here...\"\n                          onChange={(ev) => updateComment(ev)}\n                          value={comment.body || \"\"} />\n          </Form.Group>\n          <Button variant=\"primary\"\n                  type=\"submit\"\n                  disabled={comment.body === \"\"}>\n            Comment\n          </Button>\n        </Form>\n      </Col>\n    </Row>\n  );\n}\n","import { Row, Col, Card } from 'react-bootstrap';\nimport { connect } from 'react-redux';\n\nfunction Comment({comment}) {\n  return (\n    <Col>\n      <Card style={{ width: '45rem' }}>\n        <Card.Body>\n          <Card.Text>\n            {comment.body}\n            <br/>\n            <i>Posted by {comment.user.name}</i>\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n}\n\nfunction CommentsFeed({comments}) {\n  // filters out comments that are not meant for this post\n  let post_id = localStorage.getItem(\"post_id\");\n  let post_comments = comments.filter((comment) => comment.post_id == post_id);\n\n  let cards = post_comments.map((comment) => <Comment comment={comment} key={comment.id}/>);\n  return (\n    <div>\n      <Row>\n        { cards }\n      </Row>\n    </div>\n  );\n}\n\n\nexport default connect(({comments}) => ({comments}))(CommentsFeed);\n","import { Row, Col, Form, Button } from 'react-bootstrap';\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport { get_user_id } from '../store'\n\nimport { new_response, get_responses } from '../api';\n\nexport default function NewResponse(props) {\n  let history = useHistory();\n  const [response, setResponse] = useState({response: \"No\"});\n\n  function updateResponse(ev) {\n    let resp = Object.assign({}, response);\n    resp[\"response\"] = ev.target.value;\n    setResponse(resp);\n  }\n\n  function onSubmit(ev) {\n    ev.preventDefault();\n\n    //sets the user_id and the post_id for this comment\n    response.user_id = get_user_id();\n    response.post_id = props.post_id;\n    let event_path = \"/events/\" + response.post_id;\n\n    new_response(response).then(() => {\n      get_responses();\n      history.push(event_path);\n    });\n  }\n\n  return (\n    <Row>\n        <Form onSubmit={onSubmit}>\n            <Form.Group>\n            <b>Update your response:  </b>\n              <Button variant=\"outline-success\"\n                      type=\"submit\"\n                      onClick={() => setResponse({response: \"Yes\"})}\n              >\n                Yes\n              </Button>\n              <Button variant=\"outline-danger\"\n                      type=\"submit\"\n                      onClick={() => setResponse({response: \"No\"})}\n              >\n                No\n              </Button>\n            </Form.Group>\n        </Form>\n    </Row>\n  );\n}\n","import { ListGroup } from 'react-bootstrap';\nimport { connect } from 'react-redux';\n\nfunction Response({response}) {\n  return (\n    <ListGroup.Item>\n        {response.user.email}: <b>{response.response}</b>\n    </ListGroup.Item>\n  );\n}\n\nfunction ResponsesFeed({responses}) {\n  // filters out comments that are not meant for this post\n  let post_id = localStorage.getItem(\"post_id\");\n  let post_responses = responses.filter((resp) => resp.post_id == post_id);\n\n  let list = post_responses.map((resp) => <Response response={resp} key={resp.id}/>);\n  return (\n    <div>\n      <ListGroup variant=\"flush\">\n        { list }\n      </ListGroup>\n    </div>\n  );\n}\n\n\nexport default connect(({responses}) => ({responses}))(ResponsesFeed);\n","import { Row, Col } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { useLocation } from 'react-router-dom';\n\nimport NewComment from \"../Comments/New\";\nimport CommentsFeed from \"../Comments/Comments\";\n\nimport NewResponse from \"../Responses/New\";\nimport ResponsesFeed from \"../Responses/Responses\";\n\nfunction ShowEvent({posts}) {\n\n  //gets the id of the current post using the url\n  const location = useLocation();\n  let event_number = location.pathname.split(\"/\")[2];\n  let post = posts[event_number - 1];\n\n  localStorage.setItem(\"post_id\", post.id);\n\n  return (\n    <Row>\n      <Col>\n        <h2>Show Event #{event_number}</h2>\n        <p><b>Title: </b>{post.title}</p>\n        <p><b>Date: </b>{post.date}</p>\n        <p><b>Description: </b>{post.description}</p>\n        <p><b>Invitees: </b>{post.invitees}</p>\n        <h3>Responses</h3>\n        <NewResponse post_id={post.id}/>\n        <ResponsesFeed />\n        <h3>Comments</h3>\n        <NewComment post_id={post.id}/>\n        <CommentsFeed />\n      </Col>\n    </Row>\n  );\n}\n\nexport default connect(({posts}) => ({posts}))(ShowEvent);\n","import { Row, Col, Form, Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport { useState } from 'react'\nimport pick from 'lodash/pick';\n\nimport { get_user_id } from '../store'\n\nimport { new_post, get_posts } from '../api';\n\nfunction NewEvent() {\n  let history = useHistory();\n  let [post, setPost] = useState({title: \"\", date: \"\", description: \"\", invitees: \"\"});\n\n  //validates the list of invitees\n  function check_invitees(invitees) {\n    let valid = true;\n    let email_list = invitees.split(\", \");\n    for (var i = 0; i < email_list.length; i++) {\n      valid = valid && /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email_list[i]);\n    }\n    if (!valid) {\n      return \"One or more invitee emails are not valid.\"\n    }\n    return \"\";\n  }\n\n  function anyBlank(post) {\n    return post.title === \"\" || post.date === \"\" || post.description === \"\";\n  }\n\n  function onSubmit(ev) {\n    ev.preventDefault();\n    console.log(ev);\n    console.log(post);\n    // get rid of the email msg entry\n    let data = pick(post, ['title', 'date', 'description', 'invitees']);\n    // add the user_id to the post\n    data.user_id = get_user_id();\n\n    new_post(data).then(() => {\n      get_posts();\n      history.push(\"/\"); //TODO move to new post show page\n    });\n  }\n\n  function updateField(field, ev) {\n    let new_event = Object.assign({}, post);\n    new_event[field] = ev.target.value;\n    new_event.invitee_msg = check_invitees(new_event.invitees);\n    setPost(new_event);\n  }\n\n  return (\n    <Row>\n      <Col>\n        <h2>New Event</h2>\n        <Form onSubmit={onSubmit}>\n          <Form.Group>\n            <Form.Label>Title</Form.Label>\n            <Form.Control as=\"input\" rows={4}\n                          onChange={(ev) => updateField(\"title\", ev)}\n                          value={post.title} />\n            <Form.Text className=\"text-muted\">\n              Enter a name for your event.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Date</Form.Label>\n            <Form.Control as=\"input\" type=\"date\"\n                          rows={2}\n                          onChange={(ev) => updateField(\"date\", ev)}\n                          value={post.date} />\n            <Form.Text className=\"text-muted\">\n              Enter a date for your event.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Description</Form.Label>\n            <Form.Control as=\"textarea\"\n                          rows={4}\n                          onChange={(ev) => updateField(\"description\", ev)}\n                          value={post.description} />\n            <Form.Text className=\"text-muted\">\n              Enter a description for your event.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Invitees</Form.Label>\n            <Form.Control as=\"input\"\n                          rows={4}\n                          placeholder=\"email1@example.com, email2@example.com\"\n                          onChange={(ev) => updateField(\"invitees\", ev)}\n                          value={post.invitees} />\n            <Form.Text className=\"text-muted\">\n              Enter the emails of the invitees for your event, separated by commas.\n            </Form.Text>\n            <p>{post.invitee_msg}</p>\n          </Form.Group>\n          <Button variant=\"primary\"\n                  type=\"submit\"\n                  disabled={post.invitee_msg !== \"\" || anyBlank(post)}>\n            Create\n          </Button>\n        </Form>\n      </Col>\n    </Row>\n  );\n}\n\nfunction state3props() {\n  return {};\n}\n\nexport default connect(state3props)(NewEvent);\n","import { Row, Col } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\n\nfunction ListUsers({users}) {\n  let rows = users.map((user) => (\n    <tr key={user.id}>\n      <td>{user.name}</td>\n      <td>[Edit]</td>\n    </tr>\n  ));\n\n  return (\n    <div>\n      <Row>\n        <Col>\n          <h2>List Users</h2>\n          <p>\n            <Link to=\"/users/new\">\n              New User\n            </Link>\n          </p>\n          <table className=\"table table-striped\">\n            <thead>\n              <tr>\n                <th>Name</th>\n                <th>Actions</th>\n              </tr>\n            </thead>\n            <tbody>\n              { rows }\n            </tbody>\n          </table>\n        </Col>\n      </Row>\n    </div>\n  );\n\n}\n\nfunction state2props({users}) {\n  return { users };\n}\n\nexport default connect(state2props)(ListUsers);\n","import { Row, Col, Form, Button } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport { useState } from 'react'\nimport { useHistory } from 'react-router-dom';\nimport pick from 'lodash/pick';\n\nimport { new_user, get_users } from '../api';\n\nfunction NewUser() {\n  let history = useHistory();\n  const [user, setUser] = useState({name: \"\", pass1: \"\", pass2: \"\"});\n\n  function check_email(email) {\n\n    // from w3resource.com\n    if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(email)) {\n      return \"\"\n    }\n\n    return \"Invalid email address.\"\n\n  }\n\n  function check_pass(p1, p2) {\n    if (p1 !== p2) {\n      return \"Passwords don't match.\";\n    }\n\n    if (p1.length < 8) {\n      return \"Password is too short.\";\n    }\n\n    return \"\";\n  }\n\n  function update(field, ev) {\n    let u1 = Object.assign({}, user);\n    u1[field] = ev.target.value;\n    u1.password = u1.pass1;\n    u1.pass_msg = check_pass(u1.pass1, u1.pass2);\n    u1.email_msg = check_email(u1.email);\n    setUser(u1);\n  }\n\n  function onSubmit(ev) {\n    ev.preventDefault();\n    console.log(user);\n    //get rid of the extra password and pass_msg entry\n    let data = pick(user, ['name', 'email', 'password']);\n    new_user(data).then(() => {\n      get_users();\n      history.push(\"/users\");\n    });\n  }\n\n  return (\n    <Row>\n      <Col>\n        <h2>New User</h2>\n        <Form onSubmit={onSubmit}>\n          <Form.Group>\n            <Form.Label>Name</Form.Label>\n            <Form.Control type=\"text\"\n                          onChange={(ev) => update(\"name\", ev)}\n                          value={user.name || \"\"} />\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Email</Form.Label>\n            <Form.Control type=\"text\"\n                          onChange={(ev) => update(\"email\", ev)}\n                          value={user.email || \"\"} />\n            <p>{user.email_msg}</p>\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Password</Form.Label>\n            <Form.Control type=\"password\"\n                          onChange={(ev) => update(\"pass1\", ev)}\n                          value={user.pass1 || \"\"} />\n\n          </Form.Group>\n          <Form.Group>\n            <Form.Label>Confirm Password</Form.Label>\n            <Form.Control type=\"password\"\n                          onChange={(ev) => update(\"pass2\", ev)}\n                          value={user.pass2 || \"\"} />\n            <p>{user.pass_msg}</p>\n          </Form.Group>\n          <Button variant=\"primary\"\n                  type=\"submit\"\n                  disabled={user.pass_msg !== \"\" || user.email_msg !== \"\"}>\n            Register\n          </Button>\n        </Form>\n      </Col>\n    </Row>\n  );\n}\n\nfunction state2props() {\n  return {};\n}\n\nexport default connect(state2props)(NewUser);\n","import { Container } from 'react-bootstrap';\nimport { Switch, Route } from 'react-router-dom';\n\nimport \"./App.scss\";\n\n//top navigation and login bar\nimport Navigation from \"./Navigation/Nav\";\n//events pages\nimport EventsFeed from \"./Posts/Feed\";\nimport ShowEvent from \"./Posts/View\";\nimport NewEvent from \"./Posts/New\";\n//user pages\nimport ListUsers from \"./Users/List\";\nimport NewUser from \"./Users/New\";\n\nfunction App() {\n\n  // front-end mock router\n  return (\n    <Container>\n      <Navigation />\n      <Switch>\n        <Route path=\"/\" exact>\n          <EventsFeed />\n        </Route>\n        <Route path=\"/users\" exact>\n          <ListUsers />\n        </Route>\n        <Route path=\"/users/new\" exact>\n          <NewUser />\n        </Route>\n        <Route path=\"/events/new\" exact>\n          <NewEvent />\n        </Route>\n        <Route path=\"/events/:id\">\n          <ShowEvent />\n        </Route>\n      </Switch>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n//additional imports\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport { load_defaults } from './api';\nimport { BrowserRouter as Router } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <Router>\n        <App />\n      </Router>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nload_defaults();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}